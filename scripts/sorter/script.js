let countryemoijs = ['ğŸ‡¦ğŸ‡«','ğŸ‡¦ğŸ‡±','ğŸ‡©ğŸ‡¿','ğŸ‡¦ğŸ‡¸','ğŸ‡¦ğŸ‡©','ğŸ‡¦ğŸ‡´','ğŸ‡¦ğŸ‡®','ğŸ‡¦ğŸ‡¶','ğŸ‡¦ğŸ‡¬','ğŸ‡¦ğŸ‡·','ğŸ‡¦ğŸ‡²','ğŸ‡¦ğŸ‡¼','ğŸ‡¦ğŸ‡º','ğŸ‡¦ğŸ‡¹','ğŸ‡¦ğŸ‡¿','ğŸ‡§ğŸ‡¸','ğŸ‡§ğŸ‡­','ğŸ‡§ğŸ‡©','ğŸ‡§ğŸ‡§','ğŸ‡§ğŸ‡¾','ğŸ‡§ğŸ‡ª','ğŸ‡§ğŸ‡¿','ğŸ‡§ğŸ‡¯','ğŸ‡§ğŸ‡²','ğŸ‡§ğŸ‡¹','ğŸ‡§ğŸ‡´','ğŸ‡§ğŸ‡¶','ğŸ‡§ğŸ‡¦','ğŸ‡§ğŸ‡¼','ğŸ‡§ğŸ‡»','ğŸ‡§ğŸ‡·','ğŸ‡®ğŸ‡´','ğŸ‡§ğŸ‡³','ğŸ‡§ğŸ‡¬','ğŸ‡§ğŸ‡«','ğŸ‡§ğŸ‡®','ğŸ‡¨ğŸ‡»','ğŸ‡°ğŸ‡­','ğŸ‡¨ğŸ‡²','ğŸ‡¨ğŸ‡¦','ğŸ‡°ğŸ‡¾','ğŸ‡¨ğŸ‡«','ğŸ‡¹ğŸ‡©','ğŸ‡¨ğŸ‡±','ğŸ‡¨ğŸ‡³','ğŸ‡¨ğŸ‡½','ğŸ‡¨ğŸ‡¨','ğŸ‡¨ğŸ‡´','ğŸ‡°ğŸ‡²','ğŸ‡¨ğŸ‡©','ğŸ‡¨ğŸ‡¬','ğŸ‡¨ğŸ‡°','ğŸ‡¨ğŸ‡·','ğŸ‡­ğŸ‡·','ğŸ‡¨ğŸ‡º','ğŸ‡¨ğŸ‡¼','ğŸ‡¨ğŸ‡¾','ğŸ‡¨ğŸ‡¿','ğŸ‡¨ğŸ‡®','ğŸ‡©ğŸ‡°','ğŸ‡©ğŸ‡¯','ğŸ‡©ğŸ‡²','ğŸ‡©ğŸ‡´','ğŸ‡ªğŸ‡¨','ğŸ‡ªğŸ‡¬','ğŸ‡¸ğŸ‡»','ğŸ‡¬ğŸ‡¶','ğŸ‡ªğŸ‡·','ğŸ‡ªğŸ‡ª','ğŸ‡¸ğŸ‡¿','ğŸ‡ªğŸ‡¹','ğŸ‡«ğŸ‡°','ğŸ‡«ğŸ‡´','ğŸ‡«ğŸ‡¯','ğŸ‡«ğŸ‡®','ğŸ‡«ğŸ‡·','ğŸ‡¬ğŸ‡«','ğŸ‡µğŸ‡«','ğŸ‡¹ğŸ‡«','ğŸ‡¬ğŸ‡¦','ğŸ‡¬ğŸ‡²','ğŸ‡¬ğŸ‡ª','ğŸ‡©ğŸ‡ª','ğŸ‡¬ğŸ‡­','ğŸ‡¬ğŸ‡®','ğŸ‡¬ğŸ‡·','ğŸ‡¬ğŸ‡±','ğŸ‡¬ğŸ‡©','ğŸ‡¬ğŸ‡µ','ğŸ‡¬ğŸ‡º','ğŸ‡¬ğŸ‡¹','ğŸ‡¬ğŸ‡¬','ğŸ‡¬ğŸ‡³','ğŸ‡¬ğŸ‡¼','ğŸ‡¬ğŸ‡¾','ğŸ‡­ğŸ‡¹','ğŸ‡­ğŸ‡²','ğŸ‡»ğŸ‡¦','ğŸ‡­ğŸ‡³','ğŸ‡­ğŸ‡°','ğŸ‡­ğŸ‡º','ğŸ‡®ğŸ‡¸','ğŸ‡®ğŸ‡³','ğŸ‡®ğŸ‡©','ğŸ‡®ğŸ‡·','ğŸ‡®ğŸ‡¶','ğŸ‡®ğŸ‡ª','ğŸ‡®ğŸ‡²','ğŸ‡®ğŸ‡±','ğŸ‡®ğŸ‡¹','ğŸ‡¯ğŸ‡²','ğŸ‡¯ğŸ‡µ','ğŸ‡¯ğŸ‡ª','ğŸ‡¯ğŸ‡´','ğŸ‡°ğŸ‡¿','ğŸ‡°ğŸ‡ª','ğŸ‡°ğŸ‡®','ğŸ‡°ğŸ‡µ','ğŸ‡°ğŸ‡·','ğŸ‡°ğŸ‡¼','ğŸ‡°ğŸ‡¬','ğŸ‡±ğŸ‡¦','ğŸ‡±ğŸ‡»','ğŸ‡±ğŸ‡§','ğŸ‡±ğŸ‡¸','ğŸ‡±ğŸ‡·','ğŸ‡±ğŸ‡¾','ğŸ‡±ğŸ‡®','ğŸ‡±ğŸ‡¹','ğŸ‡±ğŸ‡º','ğŸ‡²ğŸ‡´','ğŸ‡²ğŸ‡¬','ğŸ‡²ğŸ‡¼','ğŸ‡²ğŸ‡¾','ğŸ‡²ğŸ‡»','ğŸ‡²ğŸ‡±','ğŸ‡²ğŸ‡¹','ğŸ‡²ğŸ‡­','ğŸ‡²ğŸ‡¶','ğŸ‡²ğŸ‡·','ğŸ‡²ğŸ‡º','ğŸ‡¾ğŸ‡¹','ğŸ‡²ğŸ‡½','ğŸ‡«ğŸ‡²','ğŸ‡²ğŸ‡©','ğŸ‡²ğŸ‡¨','ğŸ‡²ğŸ‡³','ğŸ‡²ğŸ‡ª','ğŸ‡²ğŸ‡¸','ğŸ‡²ğŸ‡¦','ğŸ‡²ğŸ‡¿','ğŸ‡²ğŸ‡²','ğŸ‡³ğŸ‡¦','ğŸ‡³ğŸ‡·','ğŸ‡³ğŸ‡µ','ğŸ‡³ğŸ‡±','ğŸ‡³ğŸ‡¨','ğŸ‡³ğŸ‡¿','ğŸ‡³ğŸ‡®','ğŸ‡³ğŸ‡ª','ğŸ‡³ğŸ‡¬','ğŸ‡³ğŸ‡º','ğŸ‡³ğŸ‡«','ğŸ‡²ğŸ‡µ','ğŸ‡³ğŸ‡´','ğŸ‡´ğŸ‡²','ğŸ‡µğŸ‡°','ğŸ‡µğŸ‡¼','ğŸ‡µğŸ‡¸','ğŸ‡µğŸ‡¦','ğŸ‡µğŸ‡¬','ğŸ‡µğŸ‡¾','ğŸ‡µğŸ‡ª','ğŸ‡µğŸ‡­','ğŸ‡µğŸ‡³','ğŸ‡µğŸ‡±','ğŸ‡µğŸ‡¹','ğŸ‡µğŸ‡·','ğŸ‡¶ğŸ‡¦','ğŸ‡²ğŸ‡°','ğŸ‡·ğŸ‡´','ğŸ‡·ğŸ‡º','ğŸ‡·ğŸ‡¼','ğŸ‡·ğŸ‡ª','ğŸ‡§ğŸ‡±','ğŸ‡¸ğŸ‡­','ğŸ‡°ğŸ‡³','ğŸ‡±ğŸ‡¨','ğŸ‡²ğŸ‡«','ğŸ‡µğŸ‡²','ğŸ‡»ğŸ‡¨','ğŸ‡¼ğŸ‡¸','ğŸ‡¸ğŸ‡²','ğŸ‡¸ğŸ‡¹','ğŸ‡¸ğŸ‡¦','ğŸ‡¸ğŸ‡³','ğŸ‡·ğŸ‡¸','ğŸ‡¸ğŸ‡¨','ğŸ‡¸ğŸ‡±','ğŸ‡¸ğŸ‡¬','ğŸ‡¸ğŸ‡½','ğŸ‡¸ğŸ‡°','ğŸ‡¸ğŸ‡®','ğŸ‡¸ğŸ‡§','ğŸ‡¸ğŸ‡´','ğŸ‡¿ğŸ‡¦','ğŸ‡¬ğŸ‡¸','ğŸ‡¸ğŸ‡¸','ğŸ‡ªğŸ‡¸','ğŸ‡±ğŸ‡°','ğŸ‡¸ğŸ‡©','ğŸ‡¸ğŸ‡·','ğŸ‡¸ğŸ‡¯','ğŸ‡¸ğŸ‡ª','ğŸ‡¨ğŸ‡­','ğŸ‡¸ğŸ‡¾','ğŸ‡¹ğŸ‡¼','ğŸ‡¹ğŸ‡¯','ğŸ‡¹ğŸ‡¿','ğŸ‡¹ğŸ‡­','ğŸ‡¹ğŸ‡±','ğŸ‡¹ğŸ‡¬','ğŸ‡¹ğŸ‡°','ğŸ‡¹ğŸ‡´','ğŸ‡¹ğŸ‡¹','ğŸ‡¹ğŸ‡³','ğŸ‡¹ğŸ‡·','ğŸ‡¹ğŸ‡²','ğŸ‡¹ğŸ‡¨','ğŸ‡¹ğŸ‡»','ğŸ‡ºğŸ‡¬','ğŸ‡ºğŸ‡¦','ğŸ‡¦ğŸ‡ª','ğŸ‡¬ğŸ‡§','ğŸ‡ºğŸ‡²','ğŸ‡ºğŸ‡¸','ğŸ‡ºğŸ‡¾','ğŸ‡ºğŸ‡¿','ğŸ‡»ğŸ‡º','ğŸ‡»ğŸ‡ª','ğŸ‡»ğŸ‡³','ğŸ‡»ğŸ‡¬','ğŸ‡»ğŸ‡®','ğŸ‡¼ğŸ‡«','ğŸ‡ªğŸ‡­','ğŸ‡¾ğŸ‡ª','ğŸ‡¿ğŸ‡²','ğŸ‡¿ğŸ‡¼','ğŸ‡¦ğŸ‡½']
let items = countryemoijs;['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'];
let countrycodes = ["AF","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CD","CG","CK","CR","HR","CU","CW","CY","CZ","CI","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","MK","RO","RU","RW","RE","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","UM","US","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","AX"]
let scores = new Array(items.length).fill(0);
let currentIndex = 0;
let nextIndex = 1;

function shuffleArray(array) {
    for (let times = 0; times < 5; times++) { // Shuffle 5 times for better randomness
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }
}

function saveState() {
    localStorage.setItem('sorterState', JSON.stringify({ currentIndex, nextIndex, scores, items }));
}

function loadState() {
    const savedState = JSON.parse(localStorage.getItem('sorterState'));
    if (savedState) {
        currentIndex = savedState.currentIndex;
        nextIndex = savedState.nextIndex;
        scores = savedState.scores;
        items = savedState.items;
    } else {
        shuffleArray(items);
    }
}

function displayItems() {
    if (currentIndex < items.length - 1) {
        document.getElementById('item1').textContent = items[currentIndex];
        document.getElementById('item2').textContent = items[nextIndex];
    } else {
        displayFinalRanking();
    }
}

function displayFinalRanking() {
    const sortedItems = items.map((item, index) => ({ item, score: scores[index] }))
                               .sort((a, b) => b.score - a.score)
                               .map(entry => entry.item);

    const sorterDiv = document.getElementById('sorter');
    sorterDiv.innerHTML = '<p>Sorting complete! Final ranking:</p>';
    const list = document.createElement('ul');
    sortedItems.forEach(item => {
        const listItem = document.createElement('li');
        listItem.textContent = item;
        list.appendChild(listItem);
    });
    sorterDiv.appendChild(list);
}

function choose(selectedIndex) {
    if (selectedIndex === 0) {
        scores[currentIndex]++;
    } else {
        scores[nextIndex]++;
    }

    nextIndex++;
    if (nextIndex >= items.length) {
        currentIndex++;
        nextIndex = currentIndex + 1;
    }

    if (currentIndex < items.length - 1) {
        saveState();
        displayItems();
    } else {
        displayFinalRanking();
    }
}

// Initialize
loadState();
displayItems();